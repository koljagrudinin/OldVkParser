//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("ModelVkontakte", "GroupsTokenList", "Groups", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.Groups), "TokenList", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.TokenList))]
[assembly: EdmRelationshipAttribute("ModelVkontakte", "CommentsUsers", "Comments", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.Comments), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.Users))]
[assembly: EdmRelationshipAttribute("ModelVkontakte", "CommentsUsers1", "Comments", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.Comments), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ClassLibraryPlanner.Model.Users))]
[assembly: EdmRelationshipAttribute("ModelVkontakte", "PostsUsers", "Posts", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.Posts), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.Users))]
[assembly: EdmRelationshipAttribute("ModelVkontakte", "PostsUsers1", "Posts", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.Posts), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ClassLibraryPlanner.Model.Users))]
[assembly: EdmRelationshipAttribute("ModelVkontakte", "ListsResultTableUsers", "ListsResultTable", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.ListsResults), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.Users))]
[assembly: EdmRelationshipAttribute("ModelVkontakte", "OperationTableBasicMetricksResultTable", "OperationTable", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ClassLibraryPlanner.Model.Operations), "BasicMetricksResultTable", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ClassLibraryPlanner.Model.BasicMetricksResults))]
[assembly: EdmRelationshipAttribute("ModelVkontakte", "OperationTableListsResults", "OperationTable", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ClassLibraryPlanner.Model.Operations), "ListsResults", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ClassLibraryPlanner.Model.ListsResults))]
[assembly: EdmRelationshipAttribute("ModelVkontakte", "ErrorCodesOperations", "ErrorCodes", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(ClassLibraryPlanner.Model.ErrorCodes), "Operations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.Operations))]
[assembly: EdmRelationshipAttribute("ModelVkontakte", "ErrorCodeStatesErrorCodes", "ErrorCodeStates", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ClassLibraryPlanner.Model.ErrorCodeStates), "ErrorCodes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.ErrorCodes))]
[assembly: EdmRelationshipAttribute("ModelVkontakte", "PostsComments", "Posts", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ClassLibraryPlanner.Model.Posts), "Comments", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.Comments))]
[assembly: EdmRelationshipAttribute("ModelVkontakte", "ListsResultsPosts", "ListsResults", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ClassLibraryPlanner.Model.ListsResults), "Posts", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ClassLibraryPlanner.Model.Posts))]

#endregion

namespace ClassLibraryPlanner.Model
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class ModelVkontakteContainer : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект ModelVkontakteContainer, используя строку соединения из раздела "ModelVkontakteContainer" файла конфигурации приложения.
        /// </summary>
        public ModelVkontakteContainer() : base("name=ModelVkontakteContainer", "ModelVkontakteContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта ModelVkontakteContainer.
        /// </summary>
        public ModelVkontakteContainer(string connectionString) : base(connectionString, "ModelVkontakteContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта ModelVkontakteContainer.
        /// </summary>
        public ModelVkontakteContainer(EntityConnection connection) : base(connection, "ModelVkontakteContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TokenList> TokenListEnt
        {
            get
            {
                if ((_TokenListEnt == null))
                {
                    _TokenListEnt = base.CreateObjectSet<TokenList>("TokenListEnt");
                }
                return _TokenListEnt;
            }
        }
        private ObjectSet<TokenList> _TokenListEnt;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Groups> GroupsEnt
        {
            get
            {
                if ((_GroupsEnt == null))
                {
                    _GroupsEnt = base.CreateObjectSet<Groups>("GroupsEnt");
                }
                return _GroupsEnt;
            }
        }
        private ObjectSet<Groups> _GroupsEnt;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<BasicMetricksResults> BasicMetricksResultTableEnt
        {
            get
            {
                if ((_BasicMetricksResultTableEnt == null))
                {
                    _BasicMetricksResultTableEnt = base.CreateObjectSet<BasicMetricksResults>("BasicMetricksResultTableEnt");
                }
                return _BasicMetricksResultTableEnt;
            }
        }
        private ObjectSet<BasicMetricksResults> _BasicMetricksResultTableEnt;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ListsResults> ListsResultTableEnt
        {
            get
            {
                if ((_ListsResultTableEnt == null))
                {
                    _ListsResultTableEnt = base.CreateObjectSet<ListsResults>("ListsResultTableEnt");
                }
                return _ListsResultTableEnt;
            }
        }
        private ObjectSet<ListsResults> _ListsResultTableEnt;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Operations> OperationTableEnt
        {
            get
            {
                if ((_OperationTableEnt == null))
                {
                    _OperationTableEnt = base.CreateObjectSet<Operations>("OperationTableEnt");
                }
                return _OperationTableEnt;
            }
        }
        private ObjectSet<Operations> _OperationTableEnt;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Users> UsersНабор
        {
            get
            {
                if ((_UsersНабор == null))
                {
                    _UsersНабор = base.CreateObjectSet<Users>("UsersНабор");
                }
                return _UsersНабор;
            }
        }
        private ObjectSet<Users> _UsersНабор;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Comments> CommentsEnt
        {
            get
            {
                if ((_CommentsEnt == null))
                {
                    _CommentsEnt = base.CreateObjectSet<Comments>("CommentsEnt");
                }
                return _CommentsEnt;
            }
        }
        private ObjectSet<Comments> _CommentsEnt;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Posts> PostsEnd
        {
            get
            {
                if ((_PostsEnd == null))
                {
                    _PostsEnd = base.CreateObjectSet<Posts>("PostsEnd");
                }
                return _PostsEnd;
            }
        }
        private ObjectSet<Posts> _PostsEnd;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ErrorCodes> ErrorCodesEnt
        {
            get
            {
                if ((_ErrorCodesEnt == null))
                {
                    _ErrorCodesEnt = base.CreateObjectSet<ErrorCodes>("ErrorCodesEnt");
                }
                return _ErrorCodesEnt;
            }
        }
        private ObjectSet<ErrorCodes> _ErrorCodesEnt;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ErrorCodeStates> ErrorCodeStatesEnt
        {
            get
            {
                if ((_ErrorCodeStatesEnt == null))
                {
                    _ErrorCodeStatesEnt = base.CreateObjectSet<ErrorCodeStates>("ErrorCodeStatesEnt");
                }
                return _ErrorCodeStatesEnt;
            }
        }
        private ObjectSet<ErrorCodeStates> _ErrorCodeStatesEnt;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TokenListEnt. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTokenListEnt(TokenList tokenList)
        {
            base.AddObject("TokenListEnt", tokenList);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet GroupsEnt. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToGroupsEnt(Groups groups)
        {
            base.AddObject("GroupsEnt", groups);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet BasicMetricksResultTableEnt. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToBasicMetricksResultTableEnt(BasicMetricksResults basicMetricksResults)
        {
            base.AddObject("BasicMetricksResultTableEnt", basicMetricksResults);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ListsResultTableEnt. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToListsResultTableEnt(ListsResults listsResults)
        {
            base.AddObject("ListsResultTableEnt", listsResults);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet OperationTableEnt. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToOperationTableEnt(Operations operations)
        {
            base.AddObject("OperationTableEnt", operations);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet UsersНабор. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToUsersНабор(Users users)
        {
            base.AddObject("UsersНабор", users);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet CommentsEnt. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCommentsEnt(Comments comments)
        {
            base.AddObject("CommentsEnt", comments);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PostsEnd. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPostsEnd(Posts posts)
        {
            base.AddObject("PostsEnd", posts);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ErrorCodesEnt. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToErrorCodesEnt(ErrorCodes errorCodes)
        {
            base.AddObject("ErrorCodesEnt", errorCodes);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ErrorCodeStatesEnt. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToErrorCodeStatesEnt(ErrorCodeStates errorCodeStates)
        {
            base.AddObject("ErrorCodeStatesEnt", errorCodeStates);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ModelVkontakte", Name="BasicMetricksResults")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BasicMetricksResults : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта BasicMetricksResults.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="postCount">Исходное значение свойства PostCount.</param>
        /// <param name="audioCount">Исходное значение свойства AudioCount.</param>
        /// <param name="videoCount">Исходное значение свойства VideoCount.</param>
        /// <param name="membersCount">Исходное значение свойства MembersCount.</param>
        public static BasicMetricksResults CreateBasicMetricksResults(global::System.Int32 id, global::System.String postCount, global::System.String audioCount, global::System.String videoCount, global::System.String membersCount)
        {
            BasicMetricksResults basicMetricksResults = new BasicMetricksResults();
            basicMetricksResults.Id = id;
            basicMetricksResults.PostCount = postCount;
            basicMetricksResults.AudioCount = audioCount;
            basicMetricksResults.VideoCount = videoCount;
            basicMetricksResults.MembersCount = membersCount;
            return basicMetricksResults;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PostCount
        {
            get
            {
                return _PostCount;
            }
            set
            {
                OnPostCountChanging(value);
                ReportPropertyChanging("PostCount");
                _PostCount = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PostCount");
                OnPostCountChanged();
            }
        }
        private global::System.String _PostCount;
        partial void OnPostCountChanging(global::System.String value);
        partial void OnPostCountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AudioCount
        {
            get
            {
                return _AudioCount;
            }
            set
            {
                OnAudioCountChanging(value);
                ReportPropertyChanging("AudioCount");
                _AudioCount = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("AudioCount");
                OnAudioCountChanged();
            }
        }
        private global::System.String _AudioCount;
        partial void OnAudioCountChanging(global::System.String value);
        partial void OnAudioCountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String VideoCount
        {
            get
            {
                return _VideoCount;
            }
            set
            {
                OnVideoCountChanging(value);
                ReportPropertyChanging("VideoCount");
                _VideoCount = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("VideoCount");
                OnVideoCountChanged();
            }
        }
        private global::System.String _VideoCount;
        partial void OnVideoCountChanging(global::System.String value);
        partial void OnVideoCountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MembersCount
        {
            get
            {
                return _MembersCount;
            }
            set
            {
                OnMembersCountChanging(value);
                ReportPropertyChanging("MembersCount");
                _MembersCount = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MembersCount");
                OnMembersCountChanged();
            }
        }
        private global::System.String _MembersCount;
        partial void OnMembersCountChanging(global::System.String value);
        partial void OnMembersCountChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ModelVkontakte", Name="Comments")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Comments : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Comments.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="commentId">Исходное значение свойства CommentId.</param>
        public static Comments CreateComments(global::System.Int32 id, global::System.String commentId)
        {
            Comments comments = new Comments();
            comments.Id = id;
            comments.CommentId = commentId;
            return comments;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CommentId
        {
            get
            {
                return _CommentId;
            }
            set
            {
                OnCommentIdChanging(value);
                ReportPropertyChanging("CommentId");
                _CommentId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CommentId");
                OnCommentIdChanged();
            }
        }
        private global::System.String _CommentId;
        partial void OnCommentIdChanging(global::System.String value);
        partial void OnCommentIdChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "CommentsUsers", "Users")]
        public EntityCollection<Users> UsersLike
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Users>("ModelVkontakte.CommentsUsers", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Users>("ModelVkontakte.CommentsUsers", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "CommentsUsers1", "Users")]
        public Users UserAuthor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("ModelVkontakte.CommentsUsers1", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("ModelVkontakte.CommentsUsers1", "Users").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Users> UserAuthorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("ModelVkontakte.CommentsUsers1", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Users>("ModelVkontakte.CommentsUsers1", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "PostsComments", "Posts")]
        public Posts Posts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Posts>("ModelVkontakte.PostsComments", "Posts").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Posts>("ModelVkontakte.PostsComments", "Posts").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Posts> PostsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Posts>("ModelVkontakte.PostsComments", "Posts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Posts>("ModelVkontakte.PostsComments", "Posts", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ModelVkontakte", Name="ErrorCodes")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ErrorCodes : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ErrorCodes.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="description">Исходное значение свойства Description.</param>
        /// <param name="methodErrorId">Исходное значение свойства MethodErrorId.</param>
        public static ErrorCodes CreateErrorCodes(global::System.Int32 id, global::System.String description, global::System.Int32 methodErrorId)
        {
            ErrorCodes errorCodes = new ErrorCodes();
            errorCodes.Id = id;
            errorCodes.Description = description;
            errorCodes.MethodErrorId = methodErrorId;
            return errorCodes;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MethodErrorId
        {
            get
            {
                return _MethodErrorId;
            }
            set
            {
                OnMethodErrorIdChanging(value);
                ReportPropertyChanging("MethodErrorId");
                _MethodErrorId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MethodErrorId");
                OnMethodErrorIdChanged();
            }
        }
        private global::System.Int32 _MethodErrorId;
        partial void OnMethodErrorIdChanging(global::System.Int32 value);
        partial void OnMethodErrorIdChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "ErrorCodesOperations", "Operations")]
        public EntityCollection<Operations> Operations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Operations>("ModelVkontakte.ErrorCodesOperations", "Operations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Operations>("ModelVkontakte.ErrorCodesOperations", "Operations", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "ErrorCodeStatesErrorCodes", "ErrorCodeStates")]
        public ErrorCodeStates ErrorCodeState
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ErrorCodeStates>("ModelVkontakte.ErrorCodeStatesErrorCodes", "ErrorCodeStates").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ErrorCodeStates>("ModelVkontakte.ErrorCodeStatesErrorCodes", "ErrorCodeStates").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ErrorCodeStates> ErrorCodeStateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ErrorCodeStates>("ModelVkontakte.ErrorCodeStatesErrorCodes", "ErrorCodeStates");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ErrorCodeStates>("ModelVkontakte.ErrorCodeStatesErrorCodes", "ErrorCodeStates", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ModelVkontakte", Name="ErrorCodeStates")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ErrorCodeStates : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ErrorCodeStates.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="errorId">Исходное значение свойства ErrorId.</param>
        /// <param name="description">Исходное значение свойства Description.</param>
        public static ErrorCodeStates CreateErrorCodeStates(global::System.Int32 id, global::System.Int32 errorId, global::System.String description)
        {
            ErrorCodeStates errorCodeStates = new ErrorCodeStates();
            errorCodeStates.Id = id;
            errorCodeStates.ErrorId = errorId;
            errorCodeStates.Description = description;
            return errorCodeStates;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ErrorId
        {
            get
            {
                return _ErrorId;
            }
            set
            {
                OnErrorIdChanging(value);
                ReportPropertyChanging("ErrorId");
                _ErrorId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ErrorId");
                OnErrorIdChanged();
            }
        }
        private global::System.Int32 _ErrorId;
        partial void OnErrorIdChanging(global::System.Int32 value);
        partial void OnErrorIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "ErrorCodeStatesErrorCodes", "ErrorCodes")]
        public EntityCollection<ErrorCodes> ErrorCodes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ErrorCodes>("ModelVkontakte.ErrorCodeStatesErrorCodes", "ErrorCodes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ErrorCodes>("ModelVkontakte.ErrorCodeStatesErrorCodes", "ErrorCodes", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ModelVkontakte", Name="Groups")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Groups : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Groups.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="groupId">Исходное значение свойства GroupId.</param>
        /// <param name="basicMetrickRegularReading">Исходное значение свойства BasicMetrickRegularReading.</param>
        /// <param name="basicMetricksTimeOut">Исходное значение свойства BasicMetricksTimeOut.</param>
        /// <param name="listsRegulerReading">Исходное значение свойства ListsRegulerReading.</param>
        /// <param name="listsTimeOut">Исходное значение свойства ListsTimeOut.</param>
        public static Groups CreateGroups(global::System.Int32 id, global::System.String groupId, global::System.Int32 basicMetrickRegularReading, global::System.Int32 basicMetricksTimeOut, global::System.Int32 listsRegulerReading, global::System.Int32 listsTimeOut)
        {
            Groups groups = new Groups();
            groups.Id = id;
            groups.GroupId = groupId;
            groups.BasicMetrickRegularReading = basicMetrickRegularReading;
            groups.BasicMetricksTimeOut = basicMetricksTimeOut;
            groups.ListsRegulerReading = listsRegulerReading;
            groups.ListsTimeOut = listsTimeOut;
            return groups;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GroupId
        {
            get
            {
                return _GroupId;
            }
            set
            {
                OnGroupIdChanging(value);
                ReportPropertyChanging("GroupId");
                _GroupId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("GroupId");
                OnGroupIdChanged();
            }
        }
        private global::System.String _GroupId;
        partial void OnGroupIdChanging(global::System.String value);
        partial void OnGroupIdChanged();
    
        /// <summary>
        /// Регулярность считывания базовых метрик
        /// </summary>
        /// <LongDescription>
        /// Регулярность считывания базовых метрик
        /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BasicMetrickRegularReading
        {
            get
            {
                return _BasicMetrickRegularReading;
            }
            set
            {
                OnBasicMetrickRegularReadingChanging(value);
                ReportPropertyChanging("BasicMetrickRegularReading");
                _BasicMetrickRegularReading = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BasicMetrickRegularReading");
                OnBasicMetrickRegularReadingChanged();
            }
        }
        private global::System.Int32 _BasicMetrickRegularReading;
        partial void OnBasicMetrickRegularReadingChanging(global::System.Int32 value);
        partial void OnBasicMetrickRegularReadingChanged();
    
        /// <summary>
        /// Таймаут считывания базовых метрик
        /// </summary>
        /// <LongDescription>
        /// Таймаут считывания базовых метрик
        /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BasicMetricksTimeOut
        {
            get
            {
                return _BasicMetricksTimeOut;
            }
            set
            {
                OnBasicMetricksTimeOutChanging(value);
                ReportPropertyChanging("BasicMetricksTimeOut");
                _BasicMetricksTimeOut = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BasicMetricksTimeOut");
                OnBasicMetricksTimeOutChanged();
            }
        }
        private global::System.Int32 _BasicMetricksTimeOut;
        partial void OnBasicMetricksTimeOutChanging(global::System.Int32 value);
        partial void OnBasicMetricksTimeOutChanged();
    
        /// <summary>
        /// Регулярность считывания списков
        /// </summary>
        /// <LongDescription>
        /// Регулярность считывания списков
        /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ListsRegulerReading
        {
            get
            {
                return _ListsRegulerReading;
            }
            set
            {
                OnListsRegulerReadingChanging(value);
                ReportPropertyChanging("ListsRegulerReading");
                _ListsRegulerReading = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ListsRegulerReading");
                OnListsRegulerReadingChanged();
            }
        }
        private global::System.Int32 _ListsRegulerReading;
        partial void OnListsRegulerReadingChanging(global::System.Int32 value);
        partial void OnListsRegulerReadingChanged();
    
        /// <summary>
        /// Таймаут считывания списков
        /// </summary>
        /// <LongDescription>
        /// Таймаут считывания списков
        /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ListsTimeOut
        {
            get
            {
                return _ListsTimeOut;
            }
            set
            {
                OnListsTimeOutChanging(value);
                ReportPropertyChanging("ListsTimeOut");
                _ListsTimeOut = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ListsTimeOut");
                OnListsTimeOutChanged();
            }
        }
        private global::System.Int32 _ListsTimeOut;
        partial void OnListsTimeOutChanging(global::System.Int32 value);
        partial void OnListsTimeOutChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Список юзеров, которых можно использовать для входа в ВКонтакте
        /// </summary>
        /// <LongDescription>
        /// Список юзеров, которых можно использовать для входа в ВКонтакте
        /// </LongDescription>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "GroupsTokenList", "TokenList")]
        public EntityCollection<TokenList> TokenList
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TokenList>("ModelVkontakte.GroupsTokenList", "TokenList");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TokenList>("ModelVkontakte.GroupsTokenList", "TokenList", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ModelVkontakte", Name="ListsResults")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ListsResults : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ListsResults.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static ListsResults CreateListsResults(global::System.Int32 id)
        {
            ListsResults listsResults = new ListsResults();
            listsResults.Id = id;
            return listsResults;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "ListsResultTableUsers", "Users")]
        public EntityCollection<Users> GroupMembers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Users>("ModelVkontakte.ListsResultTableUsers", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Users>("ModelVkontakte.ListsResultTableUsers", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "ListsResultsPosts", "Posts")]
        public EntityCollection<Posts> Posts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Posts>("ModelVkontakte.ListsResultsPosts", "Posts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Posts>("ModelVkontakte.ListsResultsPosts", "Posts", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Таблица операций
    /// </summary>
    /// <LongDescription>
    /// Таблица операций
    /// </LongDescription>
    [EdmEntityTypeAttribute(NamespaceName="ModelVkontakte", Name="Operations")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Operations : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Operations.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="time">Исходное значение свойства Time.</param>
        /// <param name="isSuccess">Исходное значение свойства isSuccess.</param>
        /// <param name="groupId">Исходное значение свойства GroupId.</param>
        public static Operations CreateOperations(global::System.Int32 id, global::System.DateTime time, global::System.Boolean isSuccess, global::System.String groupId)
        {
            Operations operations = new Operations();
            operations.Id = id;
            operations.Time = time;
            operations.isSuccess = isSuccess;
            operations.GroupId = groupId;
            return operations;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Time
        {
            get
            {
                return _Time;
            }
            set
            {
                OnTimeChanging(value);
                ReportPropertyChanging("Time");
                _Time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Time");
                OnTimeChanged();
            }
        }
        private global::System.DateTime _Time;
        partial void OnTimeChanging(global::System.DateTime value);
        partial void OnTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean isSuccess
        {
            get
            {
                return _isSuccess;
            }
            set
            {
                OnisSuccessChanging(value);
                ReportPropertyChanging("isSuccess");
                _isSuccess = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("isSuccess");
                OnisSuccessChanged();
            }
        }
        private global::System.Boolean _isSuccess;
        partial void OnisSuccessChanging(global::System.Boolean value);
        partial void OnisSuccessChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GroupId
        {
            get
            {
                return _GroupId;
            }
            set
            {
                OnGroupIdChanging(value);
                ReportPropertyChanging("GroupId");
                _GroupId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("GroupId");
                OnGroupIdChanged();
            }
        }
        private global::System.String _GroupId;
        partial void OnGroupIdChanging(global::System.String value);
        partial void OnGroupIdChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "OperationTableBasicMetricksResultTable", "BasicMetricksResultTable")]
        public BasicMetricksResults BasicMetricksResult
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BasicMetricksResults>("ModelVkontakte.OperationTableBasicMetricksResultTable", "BasicMetricksResultTable").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BasicMetricksResults>("ModelVkontakte.OperationTableBasicMetricksResultTable", "BasicMetricksResultTable").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<BasicMetricksResults> BasicMetricksResultReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BasicMetricksResults>("ModelVkontakte.OperationTableBasicMetricksResultTable", "BasicMetricksResultTable");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<BasicMetricksResults>("ModelVkontakte.OperationTableBasicMetricksResultTable", "BasicMetricksResultTable", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "OperationTableListsResults", "ListsResults")]
        public ListsResults ListsResults
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ListsResults>("ModelVkontakte.OperationTableListsResults", "ListsResults").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ListsResults>("ModelVkontakte.OperationTableListsResults", "ListsResults").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ListsResults> ListsResultsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ListsResults>("ModelVkontakte.OperationTableListsResults", "ListsResults");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ListsResults>("ModelVkontakte.OperationTableListsResults", "ListsResults", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "ErrorCodesOperations", "ErrorCodes")]
        public ErrorCodes ErrorCodes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ErrorCodes>("ModelVkontakte.ErrorCodesOperations", "ErrorCodes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ErrorCodes>("ModelVkontakte.ErrorCodesOperations", "ErrorCodes").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ErrorCodes> ErrorCodesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ErrorCodes>("ModelVkontakte.ErrorCodesOperations", "ErrorCodes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ErrorCodes>("ModelVkontakte.ErrorCodesOperations", "ErrorCodes", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ModelVkontakte", Name="Posts")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Posts : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Posts.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="postId">Исходное значение свойства PostId.</param>
        public static Posts CreatePosts(global::System.Int32 id, global::System.String postId)
        {
            Posts posts = new Posts();
            posts.Id = id;
            posts.PostId = postId;
            return posts;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PostId
        {
            get
            {
                return _PostId;
            }
            set
            {
                OnPostIdChanging(value);
                ReportPropertyChanging("PostId");
                _PostId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PostId");
                OnPostIdChanged();
            }
        }
        private global::System.String _PostId;
        partial void OnPostIdChanging(global::System.String value);
        partial void OnPostIdChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "PostsUsers", "Users")]
        public EntityCollection<Users> UsersLike
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Users>("ModelVkontakte.PostsUsers", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Users>("ModelVkontakte.PostsUsers", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "PostsUsers1", "Users")]
        public Users UserAuthor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("ModelVkontakte.PostsUsers1", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("ModelVkontakte.PostsUsers1", "Users").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Users> UserAuthorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("ModelVkontakte.PostsUsers1", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Users>("ModelVkontakte.PostsUsers1", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "PostsComments", "Comments")]
        public EntityCollection<Comments> Comments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Comments>("ModelVkontakte.PostsComments", "Comments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Comments>("ModelVkontakte.PostsComments", "Comments", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "ListsResultsPosts", "ListsResults")]
        public ListsResults ListsResults
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ListsResults>("ModelVkontakte.ListsResultsPosts", "ListsResults").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ListsResults>("ModelVkontakte.ListsResultsPosts", "ListsResults").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ListsResults> ListsResultsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ListsResults>("ModelVkontakte.ListsResultsPosts", "ListsResults");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ListsResults>("ModelVkontakte.ListsResultsPosts", "ListsResults", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Таблица сожержашая данные для соединения
    /// </summary>
    /// <LongDescription>
    /// Таблица сожержашая данные для соединения
    /// </LongDescription>
    [EdmEntityTypeAttribute(NamespaceName="ModelVkontakte", Name="TokenList")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TokenList : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TokenList.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="token">Исходное значение свойства Token.</param>
        /// <param name="secretKey">Исходное значение свойства SecretKey.</param>
        public static TokenList CreateTokenList(global::System.Int32 id, global::System.String token, global::System.String secretKey)
        {
            TokenList tokenList = new TokenList();
            tokenList.Id = id;
            tokenList.Token = token;
            tokenList.SecretKey = secretKey;
            return tokenList;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Токен
        /// </summary>
        /// <LongDescription>
        /// Токен
        /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Token
        {
            get
            {
                return _Token;
            }
            set
            {
                OnTokenChanging(value);
                ReportPropertyChanging("Token");
                _Token = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Token");
                OnTokenChanged();
            }
        }
        private global::System.String _Token;
        partial void OnTokenChanging(global::System.String value);
        partial void OnTokenChanged();
    
        /// <summary>
        /// Секретный ключ
        /// </summary>
        /// <LongDescription>
        /// Секретный ключ
        /// </LongDescription>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SecretKey
        {
            get
            {
                return _SecretKey;
            }
            set
            {
                OnSecretKeyChanging(value);
                ReportPropertyChanging("SecretKey");
                _SecretKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SecretKey");
                OnSecretKeyChanged();
            }
        }
        private global::System.String _SecretKey;
        partial void OnSecretKeyChanging(global::System.String value);
        partial void OnSecretKeyChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                OnUserNameChanging(value);
                ReportPropertyChanging("UserName");
                _UserName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UserName");
                OnUserNameChanged();
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "GroupsTokenList", "Groups")]
        public EntityCollection<Groups> Groups
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Groups>("ModelVkontakte.GroupsTokenList", "Groups");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Groups>("ModelVkontakte.GroupsTokenList", "Groups", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ModelVkontakte", Name="Users")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Users : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Users.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="userId">Исходное значение свойства UserId.</param>
        public static Users CreateUsers(global::System.Int32 id, global::System.String userId)
        {
            Users users = new Users();
            users.Id = id;
            users.UserId = userId;
            return users;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.String _UserId;
        partial void OnUserIdChanging(global::System.String value);
        partial void OnUserIdChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "CommentsUsers", "Comments")]
        public EntityCollection<Comments> LikedComments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Comments>("ModelVkontakte.CommentsUsers", "Comments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Comments>("ModelVkontakte.CommentsUsers", "Comments", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "CommentsUsers1", "Comments")]
        public EntityCollection<Comments> AuthorOfComments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Comments>("ModelVkontakte.CommentsUsers1", "Comments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Comments>("ModelVkontakte.CommentsUsers1", "Comments", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "PostsUsers", "Posts")]
        public EntityCollection<Posts> LikedPosts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Posts>("ModelVkontakte.PostsUsers", "Posts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Posts>("ModelVkontakte.PostsUsers", "Posts", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "PostsUsers1", "Posts")]
        public EntityCollection<Posts> AuthorOfPosts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Posts>("ModelVkontakte.PostsUsers1", "Posts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Posts>("ModelVkontakte.PostsUsers1", "Posts", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelVkontakte", "ListsResultTableUsers", "ListsResultTable")]
        public EntityCollection<ListsResults> ListsResultTables
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ListsResults>("ModelVkontakte.ListsResultTableUsers", "ListsResultTable");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ListsResults>("ModelVkontakte.ListsResultTableUsers", "ListsResultTable", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
